---
- name: Update apt cache
  apt: update_cache=yes
  tags:
    - setup

- name: Check if 'automysqlbackup' is installed
  command: bash -c "dpkg --get-selections | grep automysqlbackup"
  register: automysqlbackup_exists
  ignore_errors: true
  tags:
    - setup
    - automysqlbackup

- name: Install automysqlbackup
  apt: name=automysqlbackup state=latest
  when: automysqlbackup_exists|failed
  tags:
    - setup
    - automysqlbackup

- name: edit automysqlbackup config file
  lineinfile:
    dest: /etc/default/automysqlbackup
    state: present
    regexp: "^CREATE_DATABASE=yes$"
    line: "CREATE_DATABASE=no"
  tags:
    - automysqlbackup
    - setup

- name: Check if rsync is installed
  command: bash -c "dpkg --get-selections | grep rsync"
  register: rsync_exists
  ignore_errors: true
  tags:
    - setup
    - rsync

- name: Install rsync
  apt: name=rsync state=latest
  when: rsync_exists|failed
  tags:
    - setup
    - rsync

- name: check if pip is installed
  command: bash -c "pip --version | grep pip"
  register: pip_exists
  ignore_errors: true
  tags:
    - setup

- name: Install pip
  when: pip_exists|failed
  apt: name=python-pip state=latest
  tags:
    - setup

- name: check if boto is installed
  command: bash -c "pip freeze | grep boto==*"
  register: boto_installed
  ignore_errors: true
  tags:
    - setup_boto
    - setup

- name: install boto
  pip: name=boto state=present
  when: boto_installed|failed
  tags:
    - setup_boto
    - setup

- name: check if aws cli is installed
  command: bash -c "aws --version 2>&1 | grep aws-cli*"
  register: aws_installed
  ignore_errors: true
  tags:
    - setup_aws_account
    - setup

- name: install aws-cli
  pip: name=awscli state=present
  tags:
    - setup_aws_account
    - setup

- name: create .aws dir under user home for awscli config
  when: aws_installed|failed
  file:
    path: "{{ ansible_env.HOME }}/.aws"
    state: directory
    owner: "{{ ansible_env.USER }}"
    mode: 0755
  tags:
    - setup_aws_account
    - setup

- name: copy awscli config using templates
  when: aws_installed|failed
  template:
    src: awscli_config.j2
    dest: "{{ ansible_env.HOME }}/.aws/config"
    owner: "{{ ansible_env.USER }}"
    mode: 0644
  tags:
    - setup_aws_account
    - setup

- name: copy awscli credentials using templates
  when: aws_installed|failed
  template:
    src: awscli_credentials.j2
    dest: "{{ ansible_env.HOME }}/.aws/credentials"
    owner: "{{ ansible_env.USER }}"
    mode: 0644
  tags:
    - setup_aws_account
    - setup

- name: check if s3 bucket exists
  command: bash -c "aws s3 ls {{s3_website_domain}}"
  register: bucket_exists
  ignore_errors: true
  tags:
    - find_bucket
    - create_bucket

- name: create bucket
  when: bucket_exists|failed
  s3_bucket:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    name: "{{ s3_website_domain }}"
    policy: "{{ s3_bucket_policy | to_json }}"
  tags:
    - create_bucket